{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IA1CMQ,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAIC,iBAEJ,IAAgCC,EAAAF,EAAIG,cAAcC,SAA1CC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAaC,OAAOJ,EAAMK,OACxBC,EAAYF,OAAOH,EAAKI,OACxBE,EAAiBH,OAAOF,EAAOG,OAErC,GAAIF,EAAa,GAAKG,EAAY,GAAKC,GAAkB,EAEvD,YADA3B,EAAA4B,OAAOC,QAAQ,6CAIjB,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAgBG,IACnC5B,EAAc4B,EAAGP,GACdQ,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBJ,EAAA4B,OAAOK,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,MAAK,CAC9D+B,QAAO,K,IAGZC,OAAM,SAAAJ,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBJ,EAAA4B,OAAOS,QAAQ,sBAAqCH,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,MAAK,CAC7D+B,QAAS,K,IAGfZ,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n\n  const { delay, step, amount } = evt.currentTarget.elements;\n  let firstDelay = Number(delay.value);\n  const delayStep = Number(step.value);\n  const amountPromises = Number(amount.value);\n\n  if (firstDelay < 0 || delayStep < 0 || amountPromises <= 0) {\n    Notify.warning('Please, fill the fields with valid values');\n    return;\n  }\n\n  for (let i = 1; i <= amountPromises; i++) {\n    createPromise(i, firstDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          timeout: 5000,\n        });\n      });\n    firstDelay += delayStep;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","firstDelay","Number","value","delayStep","amountPromises","Notify","warning","i","then","param","success","concat","timeout","catch","failure"],"version":3,"file":"03-promises.e994617b.js.map"}