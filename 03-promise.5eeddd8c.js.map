{"mappings":"gfAAA,IAQIA,EACAC,EATJC,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAAaH,SAASC,cAAc,wBACpCG,EAAQJ,SAASC,cAAc,wBA6CrC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBL,EACFI,EAAQ,CAAEE,SAAAR,EAAUS,MAAAR,IAEpBM,EAAO,CAAEC,SAAAR,EAAUS,MAAAR,G,IAGpBS,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MACjBlB,EAAAqB,OAAOC,QAAQ,uBAAwCC,OAAfN,EAAS,QAAYM,OAANL,EAAM,MAAK,CAC9DM,QAAO,K,IAGZC,OAAM,SAAAL,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAClBlB,EAAAqB,OAAOK,QAAQ,sBAAqCH,OAAfN,EAAS,QAAYM,OAANL,EAAM,MAAK,CAC7DM,QAAS,K,IA3DjBjB,EAAMoB,iBAAiB,SAIvB,SAAiBC,GACfA,EAAIC,iBAEJ,IAAMX,EAAQY,OAAO5B,EAAW6B,OAC1BC,EAAOF,OAAOzB,EAAU0B,OACxBE,EAASH,OAAOxB,EAAWyB,OACjCjC,EAAY,EACZC,EAAU,EAENmB,EAAQ,GAAKc,EAAO,GAAKC,GAAU,EACrCC,MAAM,8CAEFD,IACF1B,EAAM4B,UAAW,GAGnBC,YAAW,WAKT,GAFA5B,EADAT,GAAW,EADXD,GAAaoB,GAITnB,IAAYkC,EAIhB,IAAMI,EAAaC,aAAY,WAC7BxC,GAAakC,GACbjC,GAAW,KAEKkC,IACd1B,EAAM4B,UAAW,EACjBI,cAAcF,IAEhB7B,EAAcT,EAASD,E,GACtBkC,E,GACFd,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\"]');\nconst amountProm = document.querySelector('input[name=\"amount\"]');\nconst start = document.querySelector('button[type=\"submit\"');\n\nstart.addEventListener('click', onClick);\nlet stepDelay;\nlet counter;\n\nfunction onClick(evt) {\n  evt.preventDefault();\n\n  const delay = Number(firstDelay.value);\n  const step = Number(delayStep.value);\n  const amount = Number(amountProm.value);\n  stepDelay = 0;\n  counter = 0;\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    alert('Please, fill the fields with valid values');\n  } else {\n    if (amount) {\n      start.disabled = true;\n    }\n\n    setTimeout(() => {\n      stepDelay += delay;\n      counter += 1;\n      createPromise(counter, stepDelay);\n\n      if (counter === amount) {\n        return;\n      }\n\n      const intervalId = setInterval(() => {\n        stepDelay += step;\n        counter += 1;\n\n        if (counter === amount) {\n          start.disabled = false;\n          clearInterval(intervalId);\n        }\n        createPromise(counter, stepDelay);\n      }, step);\n    }, delay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  })\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n        timeout: 10000,\n      });\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n        timeout: 10000,\n      });\n    });\n}\n"],"names":["$ce04d3a99e08e73b$var$stepDelay","$ce04d3a99e08e73b$var$counter","$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$firstDelay","document","querySelector","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amountProm","$ce04d3a99e08e73b$var$start","$ce04d3a99e08e73b$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","position","delay","then","param","Notify","success","concat","timeout","catch","failure","addEventListener","evt","preventDefault","Number","value","step","amount","alert","disabled","setTimeout","intervalId","setInterval","clearInterval"],"version":3,"file":"03-promise.5eeddd8c.js.map"}