{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAAaH,SAASC,cAAc,wBACpCG,EAAQJ,SAASC,cAAc,wBAGrC,IAAII,EACAC,EA0CJ,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,CAAEE,SAAAR,EAAUS,MAAAR,IAEpBM,EAAO,CAAEC,SAAAR,EAAUS,MAAAR,GAAQ,IAG5BS,MAAK,EAACF,SAAEA,EAAQC,MAAEA,MACjBpB,EAAAsB,OAAOC,QAAQ,uBAAqBJ,QAAiBC,MAAW,CAC5DI,QAAO,KACT,IAEHC,OAAM,EAACN,SAAEA,EAAQC,MAAEA,MAClBpB,EAAAsB,OAAOI,QAAQ,sBAAoBP,QAAeC,MAAW,CAC3DI,QAAS,KACT,G,CA7DRjB,EAAMoB,iBAAiB,SAIvB,SAAiBC,GACfA,EAAIC,iBAEJ,MAAMT,EAAQU,OAAO5B,EAAW6B,OAC1BC,EAAOF,OAAOzB,EAAU0B,OACxBE,EAASH,OAAOxB,EAAWyB,OACjCvB,EAAY,EACZC,EAAU,EAENW,EAAQ,GAAKY,EAAO,GAAKC,GAAU,EACrCC,MAAM,8CAEFD,IACF1B,EAAM4B,UAAW,GAGnBC,YAAW,KAKT,GAJA5B,GAAaY,EACbX,GAAW,EACXC,EAAcD,EAASD,GAEnBC,IAAYwB,EAEd,YADA1B,EAAM4B,UAAW,GAInB,MAAME,EAAaC,aAAY,KAC7B9B,GAAawB,EACbvB,GAAW,EAEPA,IAAYwB,IACd1B,EAAM4B,UAAW,EACjBI,cAAcF,IAEhB3B,EAAcD,EAASD,EAAU,GAChCwB,EAAK,GACPZ,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\"]');\nconst amountProm = document.querySelector('input[name=\"amount\"]');\nconst start = document.querySelector('button[type=\"submit\"');\n\nstart.addEventListener('click', onClick);\nlet stepDelay;\nlet counter;\n\nfunction onClick(evt) {\n  evt.preventDefault();\n\n  const delay = Number(firstDelay.value);\n  const step = Number(delayStep.value);\n  const amount = Number(amountProm.value);\n  stepDelay = 0;\n  counter = 0;\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    alert('Please, fill the fields with valid values');\n  } else {\n    if (amount) {\n      start.disabled = true;\n    }\n\n    setTimeout(() => {\n      stepDelay += delay;\n      counter += 1;\n      createPromise(counter, stepDelay);\n\n      if (counter === amount) {\n        start.disabled = false;\n        return;\n      }\n\n      const intervalId = setInterval(() => {\n        stepDelay += step;\n        counter += 1;\n\n        if (counter === amount) {\n          start.disabled = false;\n          clearInterval(intervalId);\n        }\n        createPromise(counter, stepDelay);\n      }, step);\n    }, delay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  })\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n        timeout: 10000,\n      });\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n        timeout: 10000,\n      });\n    });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$firstDelay","document","querySelector","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$amountProm","$47d4ff9957288465$var$start","$47d4ff9957288465$var$stepDelay","$47d4ff9957288465$var$counter","$47d4ff9957288465$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","position","delay","then","Notify","success","timeout","catch","failure","addEventListener","evt","preventDefault","Number","value","step","amount","alert","disabled","setTimeout","intervalId","setInterval","clearInterval"],"version":3,"file":"03-promise.5cb6b7f1.js.map"}